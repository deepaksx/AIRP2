<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatERP - AIRP v2.11.0</title>
    <!-- Bootstrap CSS for table formatting -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            /* SAP Light Theme - Matching index.html */
            --primary: #0854A0;
            --primary-dark: #0066B3;
            --secondary: #32363A;
            --success: #107E3E;
            --warning: #E9730C;
            --danger: #BB0000;
            --dark-bg: #F7F7F7;
            --card-bg: #FFFFFF;
            --border: #D9D9D9;
            --text-primary: #32363A;
            --text-secondary: #6A6D70;
            --chat-bg: #FAFAFA;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--dark-bg);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        /* Sidebar - HIDDEN for clean chat interface */
        .sidebar {
            display: none; /* Hide sidebar completely */
        }

        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid var(--border);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 8px;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .logo-text h1 {
            font-size: 22px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .logo-text p {
            font-size: 12px;
            color: var(--text-secondary);
            font-weight: 500;
        }

        .quick-stats {
            padding: 20px;
            border-bottom: 1px solid var(--border);
        }

        .quick-stats h3 {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            color: var(--text-secondary);
            margin-bottom: 16px;
            font-weight: 600;
        }

        .stat-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
        }

        .stat-item {
            background: var(--dark-bg);
            padding: 12px;
            border-radius: 8px;
            border: 1px solid var(--border);
        }

        .stat-item .label {
            font-size: 11px;
            color: var(--text-secondary);
            margin-bottom: 4px;
        }

        .stat-item .value {
            font-size: 18px;
            font-weight: 700;
            color: var(--text-primary);
        }

        .quick-actions {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }

        .quick-actions h3 {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            color: var(--text-secondary);
            margin-bottom: 16px;
            font-weight: 600;
        }

        .action-btn {
            width: 100%;
            background: var(--dark-bg);
            border: 1px solid var(--border);
            padding: 14px 16px;
            border-radius: 8px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.2s;
            text-align: left;
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--text-primary);
        }

        .action-btn:hover {
            background: var(--card-bg);
            border-color: var(--primary);
            transform: translateX(4px);
        }

        .action-btn .icon {
            font-size: 20px;
            width: 32px;
            text-align: center;
        }

        .action-btn .text {
            flex: 1;
        }

        .action-btn .text .title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 2px;
        }

        .action-btn .text .desc {
            font-size: 11px;
            color: var(--text-secondary);
        }

        /* Main Chat Area */
        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--chat-bg);
        }

        .chat-header {
            padding: 20px 28px;
            border-bottom: 1px solid var(--border);
            background: var(--card-bg);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-header-left h2 {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .chat-header-left p {
            font-size: 13px;
            color: var(--text-secondary);
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: var(--dark-bg);
            border-radius: 20px;
            font-size: 13px;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--success);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .message {
            display: flex;
            gap: 12px;
            animation: slideIn 0.3s ease;
            max-width: 85%;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.user {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            flex-shrink: 0;
        }

        .message.ai .message-avatar {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

        .message.user .message-avatar {
            background: linear-gradient(135deg, #ec4899, #f43f5e);
        }

        .message-content {
            background: var(--card-bg);
            padding: 14px 18px;
            border-radius: 16px;
            line-height: 1.6;
            font-size: 14px;
            border: 1px solid var(--border);
        }

        .message.user .message-content {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border: none;
        }

        /* Interactive Cards */
        .interactive-card {
            background: var(--dark-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 20px;
            margin-top: 12px;
        }

        .interactive-card h4 {
            font-size: 16px;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            font-size: 13px;
            color: var(--text-secondary);
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            background: var(--card-bg);
            border: 1px solid var(--border);
            padding: 12px 14px;
            border-radius: 8px;
            color: var(--text-primary);
            font-size: 14px;
            transition: all 0.2s;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
        }

        .btn {
            padding: 12px 24px;
            border-radius: 8px;
            border: none;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
        }

        .btn-secondary {
            background: var(--card-bg);
            color: var(--text-primary);
            border: 1px solid var(--border);
        }

        .btn-secondary:hover {
            background: var(--dark-bg);
        }

        /* Result Cards */
        .result-card {
            background: var(--dark-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 20px;
            margin-top: 12px;
        }

        .result-card h4 {
            font-size: 15px;
            margin-bottom: 16px;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .result-row {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid var(--border);
            font-size: 14px;
        }

        .result-row:last-child {
            border-bottom: none;
        }

        .result-row .label {
            color: var(--text-secondary);
        }

        .result-row .value {
            font-weight: 600;
        }

        /* Chips */
        .chip {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
        }

        .chip.success {
            background: rgba(16, 185, 129, 0.15);
            color: var(--success);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .chip.warning {
            background: rgba(245, 158, 11, 0.15);
            color: var(--warning);
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        /* Chat Input */
        .chat-input-area {
            padding: 20px 24px;
            background: var(--card-bg);
            border-top: 1px solid var(--border);
        }

        .suggestions {
            display: flex;
            gap: 8px;
            margin-bottom: 12px;
            overflow-x: auto;
            padding-bottom: 8px;
        }

        .suggestion-chip {
            padding: 8px 16px;
            background: var(--dark-bg);
            border: 1px solid var(--border);
            border-radius: 20px;
            font-size: 13px;
            white-space: nowrap;
            cursor: pointer;
            transition: all 0.2s;
        }

        .suggestion-chip:hover {
            background: var(--primary);
            border-color: var(--primary);
        }

        .input-container {
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        .input-wrapper {
            flex: 1;
            background: var(--dark-bg);
            border: 2px solid var(--border);
            border-radius: 12px;
            padding: 4px;
            transition: all 0.2s;
        }

        .input-wrapper:focus-within {
            border-color: var(--primary);
        }

        #chatInput {
            width: 100%;
            background: transparent;
            border: none;
            padding: 12px 14px;
            color: var(--text-primary);
            font-size: 14px;
            resize: none;
            max-height: 120px;
            outline: none;
        }

        #chatInput::placeholder {
            color: var(--text-secondary);
        }

        .send-btn {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .send-btn:hover:not(:disabled) {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
        }

        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .typing-indicator {
            display: none;
            padding: 8px 0;
        }

        .typing-indicator.active {
            display: block;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
            padding: 12px 18px;
            background: var(--card-bg);
            border-radius: 16px;
            width: fit-content;
            border: 1px solid var(--border);
        }

        .typing-dots span {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--primary);
            animation: typing 1.4s infinite;
        }

        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); opacity: 0.4; }
            30% { transform: translateY(-8px); opacity: 1; }
        }

        /* Table in chat */
        .chat-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 12px;
            font-size: 13px;
        }

        .chat-table th {
            background: var(--card-bg);
            padding: 10px;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid var(--border);
            color: var(--text-secondary);
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .chat-table td {
            padding: 10px;
            border-bottom: 1px solid var(--border);
        }

        .chat-table tr:hover {
            background: var(--card-bg);
        }

        /* Bootstrap table overrides for dark theme */
        .message-content .table {
            width: 100%;
            margin: 16px 0;
            border-collapse: collapse;
            color: var(--text-primary) !important;
            background-color: transparent !important;
            font-size: 13px;
        }

        .message-content .table th {
            background: var(--card-bg) !important;
            background-color: var(--card-bg) !important;
            padding: 12px;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid var(--border) !important;
            border-color: var(--border) !important;
            color: var(--text-secondary) !important;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .message-content .table td {
            padding: 12px;
            border-bottom: 1px solid var(--border) !important;
            border-color: var(--border) !important;
            color: var(--text-primary) !important;
            background-color: transparent !important;
        }

        .message-content .table tbody tr {
            background-color: transparent !important;
        }

        .message-content .table tbody tr:hover {
            background: var(--card-bg) !important;
            background-color: var(--card-bg) !important;
        }

        .message-content .table tbody tr:hover td {
            background-color: var(--card-bg) !important;
        }

        .message-content .table tfoot td {
            font-weight: 600;
            border-top: 2px solid var(--border) !important;
            padding-top: 16px;
            color: var(--text-primary) !important;
        }

        .message-content .table thead th {
            background: var(--card-bg) !important;
            background-color: var(--card-bg) !important;
            color: var(--text-secondary) !important;
            border-color: var(--border) !important;
        }

        /* Text alignment utilities */
        .message-content .text-end {
            text-align: right !important;
        }

        .message-content .text-start {
            text-align: left !important;
        }

        .message-content .text-center {
            text-align: center !important;
        }

        /* Text color utilities */
        .message-content .text-success {
            color: var(--success) !important;
        }

        .message-content .text-danger {
            color: var(--danger) !important;
        }

        .message-content .text-warning {
            color: var(--warning) !important;
        }

        /* Badge styles for dark theme */
        .message-content .badge {
            display: inline-block;
            padding: 4px 10px;
            font-size: 11px;
            font-weight: 600;
            line-height: 1;
            border-radius: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .message-content .badge.bg-success {
            background: rgba(16, 185, 129, 0.2) !important;
            color: var(--success) !important;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .message-content .badge.bg-danger {
            background: rgba(239, 68, 68, 0.2) !important;
            color: var(--danger) !important;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .message-content .badge.bg-warning {
            background: rgba(245, 158, 11, 0.2) !important;
            color: var(--warning) !important;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        /* Alert styles for dark theme */
        .message-content .alert {
            padding: 16px 20px;
            margin: 16px 0;
            border-radius: 8px;
            border-left: 4px solid;
        }

        .message-content .alert-info {
            background: rgba(99, 102, 241, 0.1);
            border-color: var(--primary);
            color: var(--text-primary);
        }

        .message-content .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border-color: var(--success);
            color: var(--text-primary);
        }

        .message-content .alert-warning {
            background: rgba(245, 158, 11, 0.1);
            border-color: var(--warning);
            color: var(--text-primary);
        }

        .message-content .alert-danger {
            background: rgba(239, 68, 68, 0.1);
            border-color: var(--danger);
            color: var(--text-primary);
        }

        /* Margin utilities */
        .message-content .mb-3 {
            margin-bottom: 1rem;
        }

        .message-content .mt-3 {
            margin-top: 1rem;
        }

        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--dark-bg);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--border);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--primary);
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <div class="logo-icon">💼</div>
                    <div class="logo-text">
                        <h1>ChatERP</h1>
                        <p>AIRP v2.11.0 AI-Native</p>
                    </div>
                </div>
            </div>

            <div class="quick-stats">
                <h3>Quick Stats</h3>
                <div class="stat-grid">
                    <div class="stat-item">
                        <div class="label">Cash Balance</div>
                        <div class="value" id="cashBalance">---</div>
                    </div>
                    <div class="stat-item">
                        <div class="label">This Month</div>
                        <div class="value" id="monthTransactions">---</div>
                    </div>
                    <div class="stat-item">
                        <div class="label">AP Open</div>
                        <div class="value" id="apOpen">---</div>
                    </div>
                    <div class="stat-item">
                        <div class="label">AR Open</div>
                        <div class="value" id="arOpen">---</div>
                    </div>
                </div>
            </div>

            <div class="quick-actions">
                <h3>Quick Actions</h3>

                <button class="action-btn" onclick="quickAction('post_journal')">
                    <span class="icon">📝</span>
                    <span class="text">
                        <div class="title">Post Entry</div>
                        <div class="desc">Record transaction</div>
                    </span>
                </button>

                <button class="action-btn" onclick="quickAction('view_gl')">
                    <span class="icon">📖</span>
                    <span class="text">
                        <div class="title">View Ledger</div>
                        <div class="desc">All accounts</div>
                    </span>
                </button>

                <button class="action-btn" onclick="quickAction('trial_balance')">
                    <span class="icon">⚖️</span>
                    <span class="text">
                        <div class="title">Trial Balance</div>
                        <div class="desc">Account balances</div>
                    </span>
                </button>

                <button class="action-btn" onclick="quickAction('classify')">
                    <span class="icon">🤖</span>
                    <span class="text">
                        <div class="title">AI Classify</div>
                        <div class="desc">Auto-categorize</div>
                    </span>
                </button>

                <button class="action-btn" onclick="quickAction('reconcile')">
                    <span class="icon">🔄</span>
                    <span class="text">
                        <div class="title">Reconcile</div>
                        <div class="desc">Match bank statement</div>
                    </span>
                </button>

                <button class="action-btn" onclick="quickAction('cash_flow')">
                    <span class="icon">📊</span>
                    <span class="text">
                        <div class="title">Cash Forecast</div>
                        <div class="desc">AI predictions</div>
                    </span>
                </button>
            </div>
        </div>

        <!-- Main Chat -->
        <div class="chat-main">
            <div class="chat-header">
                <div class="chat-header-left">
                    <h2>💬 ChatERP - AI Financial Assistant</h2>
                    <p>AIRP v2.11.0 | Ask me anything about your financial data</p>
                </div>
                <div class="status-indicator">
                    <span class="status-dot"></span>
                    <span>AI Connected</span>
                </div>
            </div>

            <div class="chat-messages" id="chatMessages">
                <div class="message ai">
                    <div class="message-avatar">🤖</div>
                    <div class="message-content">
                        <p><strong>Welcome to ChatERP!</strong></p>
                        <p style="margin-top: 8px;">I'm your AI financial assistant. Just tell me what you need in plain English:</p>
                        <ul style="margin: 12px 0 0 20px; line-height: 2;">
                            <li>🏢 "List vendor balances"</li>
                            <li>💰 "Post rent payment 5000 AED"</li>
                            <li>📊 "Show me recent transactions"</li>
                            <li>🔍 "What's my cash balance?"</li>
                            <li>⚖️ "Show trial balance"</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="chat-input-area">
                <div class="typing-indicator" id="typingIndicator">
                    <div class="typing-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>

                <div class="suggestions" id="suggestions">
                    <div class="suggestion-chip" onclick="sendMessage('List vendor balances')">🏢 Vendors</div>
                    <div class="suggestion-chip" onclick="sendMessage('Show trial balance')">⚖️ Trial balance</div>
                    <div class="suggestion-chip" onclick="sendMessage('What is my cash balance?')">💵 Cash balance</div>
                    <div class="suggestion-chip" onclick="sendMessage('Classify: Office supplies 850 AED')">🤖 Classify</div>
                </div>

                <div class="input-container">
                    <div class="input-wrapper">
                        <textarea
                            id="chatInput"
                            placeholder="Ask me anything... (e.g., 'Post a journal entry for rent 5000 AED')"
                            rows="1"
                            onkeypress="handleKeyPress(event)"
                        ></textarea>
                    </div>
                    <button class="send-btn" id="sendBtn" onclick="sendMessage()">
                        ➤
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const TENANT_ID = '00000000-0000-0000-0000-000000000001';
        const chatMessages = document.getElementById('chatMessages');
        const chatInput = document.getElementById('chatInput');
        const sendBtn = document.getElementById('sendBtn');
        const typingIndicator = document.getElementById('typingIndicator');

        // Load quick stats
        loadQuickStats();

        function handleKeyPress(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        }

        function quickAction(action) {
            const messages = {
                'post_journal': 'I want to post a journal entry',
                'view_gl': 'Show me the general ledger',
                'trial_balance': 'Show me the trial balance',
                'classify': 'I want to classify a transaction',
                'reconcile': 'I want to reconcile bank statement',
                'cash_flow': 'Show me cash flow forecast'
            };
            sendMessage(messages[action]);
        }

        async function sendMessage(text) {
            const message = text || chatInput.value.trim();
            if (!message) return;

            // Clear input
            chatInput.value = '';
            chatInput.style.height = 'auto';

            // Add user message
            addMessage(message, 'user');

            // Show typing
            typingIndicator.classList.add('active');
            sendBtn.disabled = true;

            // Process message
            await processMessage(message);

            // Hide typing
            typingIndicator.classList.remove('active');
            sendBtn.disabled = false;
            chatInput.focus();
        }

        function addMessage(content, type = 'ai') {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;

            messageDiv.innerHTML = `
                <div class="message-avatar">${type === 'ai' ? '🤖' : '👤'}</div>
                <div class="message-content">${content}</div>
            `;

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        async function processMessage(message) {
            try {
                // Store original query for AI formatting
                lastOriginalQuery = message;

                // Call AI Query Parser to understand the intent
                const parseResponse = await fetch('http://localhost:8006/parse', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        tenant_id: TENANT_ID,
                        query: message
                    })
                });

                if (!parseResponse.ok) {
                    // Fallback to regex-based detection if AI service unavailable
                    console.warn('AI Query Parser unavailable, using fallback');
                    await processMessageFallback(message);
                    return;
                }

                const parsed = await parseResponse.json();
                console.log('AI Query Parser result:', parsed);

                // Route based on AI-detected intent and entities
                await handleParsedQuery(parsed, message);

            } catch (err) {
                console.error('AI Query Parser error:', err);
                // Fallback to regex-based detection
                await processMessageFallback(message);
            }
        }

        async function handleParsedQuery(parsed, originalMessage) {
            const { intent, action, entities, sql_query, explanation } = parsed;
            const domain = entities.domain;
            const entityType = entities.entity_type;

            // ANALYZE intent - counts, summaries, calculations
            if (intent === 'ANALYZE') {
                if (entityType === 'account' && domain === 'GL') {
                    // "How many accounts do we have?"
                    await executeAndDisplayAnalysis(sql_query, explanation, 'GL Accounts');
                } else if (entityType === 'summary' && domain === 'AP') {
                    // "What's total AP balance?"
                    await showVendorBalances();
                } else if (entityType === 'summary' && domain === 'AR') {
                    await showCustomerBalances();
                } else {
                    await executeAndDisplayAnalysis(sql_query, explanation, 'Analysis Result');
                }
            }
            // QUERY intent - retrieve data
            else if (intent === 'QUERY') {
                if (entityType === 'vendor') {
                    await showVendorBalances();
                } else if (entityType === 'customer') {
                    await showCustomerBalances();
                } else if (entityType === 'account' && entities.filters?.account_code === '1000') {
                    await showCashBalance();
                } else if (entityType === 'entry' || entityType === 'transaction') {
                    await showRecentTransactions();
                } else if (entityType === 'account' && action === 'count_gl_accounts') {
                    // "How many accounts do we have?"
                    await executeAndDisplayAnalysis(sql_query, explanation, 'GL Accounts Summary');
                } else {
                    // Generic query execution
                    await executeAndDisplayQuery(sql_query, explanation);
                }
            }
            // REPORT intent - generate reports
            else if (intent === 'REPORT') {
                if (domain === 'REPORTING' || originalMessage.match(/trial balance/i)) {
                    await showTrialBalance();
                } else if (domain === 'CASH') {
                    showCashFlowInfo();
                } else if (domain === 'GL') {
                    await showGeneralLedger();
                } else {
                    await executeAndDisplayQuery(sql_query, explanation);
                }
            }
            // CREATE intent - create new records
            else if (intent === 'CREATE') {
                if (entityType === 'entry') {
                    showJournalEntryForm(originalMessage);
                } else if (entityType === 'vendor') {
                    addMessage(`
                        <div class="result-card">
                            <h4>➕ Create Vendor Account</h4>
                            <p>${explanation}</p>
                            <p style="margin-top: 12px;"><strong>Suggested Data:</strong></p>
                            <pre style="background: var(--dark-bg); padding: 12px; border-radius: 8px; margin-top: 8px; font-size: 12px; overflow-x: auto;">${JSON.stringify(entities.new_record, null, 2)}</pre>
                            <p style="margin-top: 12px;"><small>Vendor creation form will be available in the next update.</small></p>
                        </div>
                    `);
                } else if (entityType === 'customer') {
                    addMessage(`
                        <div class="result-card">
                            <h4>➕ Create Customer Account</h4>
                            <p>${explanation}</p>
                            <p style="margin-top: 12px;"><strong>Suggested Data:</strong></p>
                            <pre style="background: var(--dark-bg); padding: 12px; border-radius: 8px; margin-top: 8px; font-size: 12px; overflow-x: auto;">${JSON.stringify(entities.new_record, null, 2)}</pre>
                            <p style="margin-top: 12px;"><small>Customer creation form will be available in the next update.</small></p>
                        </div>
                    `);
                } else {
                    addMessage(`<p>✅ ${explanation}</p><p style="margin-top: 8px;"><small>Creation interface coming soon.</small></p>`);
                }
            }
            // CLARIFY intent - show options as clickable buttons
            else if (intent === 'CLARIFY') {
                let html = `
                    <p>🤖 ${explanation}</p>
                `;

                if (parsed.clarification_options && parsed.clarification_options.length > 0) {
                    html += `
                        <div style="margin-top: 16px; display: flex; flex-direction: column; gap: 8px;">
                    `;

                    parsed.clarification_options.forEach((option, index) => {
                        // Store context for follow-up
                        const mappedQuery = mapClarificationToQuery(action, option, entities);
                        html += `
                            <button class="btn btn-secondary" onclick="sendMessage('${mappedQuery.replace(/'/g, "\\'")}')">
                                ${option}
                            </button>
                        `;
                    });

                    html += `</div>`;
                }

                addMessage(html);
            }
            else {
                addMessage(`<p>🤖 ${explanation}</p><p style="margin-top: 8px;"><small>This feature is being developed.</small></p>`);
            }
        }

        function mapClarificationToQuery(action, option, entities) {
            // Map clarification options to complete queries

            // Account queries
            if (action === 'clarify_account_query') {
                if (option.includes('Just show') || option.includes('codes and names')) {
                    return 'List all accounts';
                } else if (option.includes('balances')) {
                    return 'Show accounts with their current balances';
                }
            }

            // Vendor queries
            if (action === 'clarify_vendor_query' || action === 'clarify_vendor_list_query') {
                if (option.includes('Just vendor') || option.includes('names and basic')) {
                    return 'List all vendors';
                } else if (option.includes('outstanding') || option.includes('balances')) {
                    return 'List vendor balances';
                }
            }

            // Invoice queries
            if (action === 'clarify_invoice_type') {
                if (option.includes('Payable')) {
                    return 'Show AP invoices';
                } else if (option.includes('Receivable')) {
                    return 'Show AR invoices';
                }
            }

            // Default: return the option as-is
            return option;
        }

        // Store the last query for AI formatting
        let lastOriginalQuery = '';

        async function executeAndDisplayAnalysis(sqlQuery, explanation, title) {
            if (!sqlQuery) {
                addMessage(`<p>${explanation}</p>`);
                return;
            }

            try {
                const response = await fetch('http://localhost:3008/api/query', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: sqlQuery, params: [] })
                });

                if (response.ok) {
                    const result = await response.json();

                    // NEW: Send raw result to AI for formatting
                    try {
                        const formatResponse = await fetch('http://localhost:8006/format-response', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                tenant_id: TENANT_ID,
                                original_query: lastOriginalQuery || explanation,
                                raw_data: result,
                                data_type: 'query_result'
                            })
                        });

                        if (formatResponse.ok) {
                            const formatted = await formatResponse.json();
                            // Display AI-formatted HTML
                            addMessage(formatted.formatted_html);
                            return;
                        } else {
                            console.warn('AI formatter unavailable, using fallback display');
                        }
                    } catch (formatErr) {
                        console.warn('Failed to format with AI:', formatErr);
                        // Fall through to manual formatting
                    }

                    // FALLBACK: Manual formatting (original code)
                    let html = `
                        <div class="result-card">
                            <h4>📊 ${title}</h4>
                            <p style="margin-bottom: 16px;">${explanation}</p>
                    `;

                    if (result && result.length > 0) {
                        // Calculate total if there's an account_count field
                        let total = 0;
                        if (result[0].account_count || result[0].count) {
                            total = result.reduce((sum, row) => sum + parseInt(row.account_count || row.count || 0), 0);
                        }

                        // Show total first if we have grouped data
                        if (result.length > 1 && total > 0) {
                            html += `
                                <div style="background: var(--dark-bg); padding: 16px; border-radius: 8px; margin-bottom: 16px; text-align: center;">
                                    <div style="font-size: 48px; font-weight: 700; color: var(--primary);">${total}</div>
                                    <div style="margin-top: 8px; color: var(--text-secondary);">Total Accounts</div>
                                </div>
                            `;
                        }

                        // Show breakdown
                        if (result.length > 1) {
                            html += `<div style="margin-top: 16px;"><strong>Breakdown by Type:</strong></div>`;
                        }

                        result.forEach(row => {
                            const keys = Object.keys(row);
                            keys.forEach(key => {
                                const value = row[key];
                                html += `
                                    <div class="result-row">
                                        <span class="label">${key.replace(/_/g, ' ').toUpperCase()}:</span>
                                        <span class="value">${value !== null ? value : 'N/A'}</span>
                                    </div>
                                `;
                            });
                            if (result.length > 1) {
                                html += `<div style="height: 8px;"></div>`;
                            }
                        });
                    } else {
                        html += `<p>No results found.</p>`;
                    }

                    html += `</div>`;
                    addMessage(html);
                } else {
                    let errorText = '';
                    try {
                        const errorJson = await response.json();
                        errorText = errorJson.message || JSON.stringify(errorJson);
                    } catch {
                        errorText = await response.text();
                    }

                    // Check for common schema errors
                    if (errorText.includes('does not exist') || errorText.includes('syntax error')) {
                        addMessage(`
                            <div class="result-card">
                                <h4>⚠️ Query Needs Adjustment</h4>
                                <p>${explanation}</p>
                                <p style="margin-top: 12px; padding: 12px; background: rgba(239, 68, 68, 0.1); border-left: 3px solid var(--danger); border-radius: 4px;">
                                    <strong>Database Error:</strong> The AI-generated query referenced a column or table that doesn't exist in the database.
                                </p>
                                <p style="margin-top: 12px;"><small>This can happen when the AI doesn't have full schema context. Try rephrasing your question or ask for something more specific.</small></p>
                            </div>
                        `);
                    } else {
                        addMessage(`❌ Failed to execute query: ${errorText}<br><p style="margin-top: 8px;">${explanation}</p>`);
                    }
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><p style="margin-top: 8px;">${explanation}</p>`);
            }
        }

        async function executeAndDisplayQuery(sqlQuery, explanation) {
            await executeAndDisplayAnalysis(sqlQuery, explanation, 'Query Results');
        }

        async function processMessageFallback(message) {
            const lower = message.toLowerCase();

            // Fallback regex-based intent detection
            if (/post|create|record.*(journal|entry|payment)/i.test(message)) {
                showJournalEntryForm(message);
            }
            else if (/trial balance|tb/i.test(message)) {
                await showTrialBalance();
            }
            else if (/general ledger|gl|ledger/i.test(message)) {
                await showGeneralLedger();
            }
            else if (/classify/i.test(message)) {
                await classifyTransaction(message);
            }
            else if (/vendor.*balance|list.*vendor|ap.*balance|payable|vendor.*owe|owe.*vendor/i.test(message)) {
                await showVendorBalances();
            }
            else if (/customer.*balance|list.*customer|ar.*balance|receivable|customer.*owe/i.test(message)) {
                await showCustomerBalances();
            }
            else if (/cash balance|what.*balance|my balance/i.test(message)) {
                await showCashBalance();
            }
            else if (/reconcile|reconciliation/i.test(message)) {
                showReconciliationInfo();
            }
            else if (/cash flow|forecast/i.test(message)) {
                showCashFlowInfo();
            }
            else if (/transactions|entries/i.test(message)) {
                await showRecentTransactions();
            }
            else {
                addMessage(`
                    <p>I can help you with:</p>
                    <ul style="margin: 8px 0 0 20px; line-height: 1.8;">
                        <li><strong>Post transactions:</strong> "Post rent 5000 AED"</li>
                        <li><strong>View reports:</strong> "Show trial balance"</li>
                        <li><strong>Vendor/Customer balances:</strong> "List vendor balances"</li>
                        <li><strong>AI classification:</strong> "Classify Office supplies 850 AED"</li>
                        <li><strong>Check balances:</strong> "What's my cash balance?"</li>
                        <li><strong>View data:</strong> "Show recent transactions"</li>
                    </ul>
                    <p style="margin-top: 12px;">Try one of these or ask me anything!</p>
                `);
            }
        }

        function showJournalEntryForm(message) {
            // Extract entities from message
            const amountMatch = message.match(/(\d+(?:,\d{3})*(?:\.\d{2})?)\s*(AED|USD)?/);
            const amount = amountMatch ? amountMatch[1] : '';

            const form = `
                <div class="interactive-card">
                    <h4>📝 Post Journal Entry</h4>

                    <div class="form-group">
                        <label>Entry Date</label>
                        <input type="date" id="entryDate" value="${new Date().toISOString().split('T')[0]}">
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" id="entryDescription" placeholder="e.g., Rent payment for January" value="${extractDescription(message)}">
                    </div>

                    <div style="margin: 20px 0;">
                        <strong>Debit Entry</strong>
                        <div class="form-row" style="margin-top: 8px;">
                            <div class="form-group">
                                <label>Account Code</label>
                                <select id="debitAccount">
                                    <option value="">Select account...</option>
                                    <option value="5300">5300 - Rent Expense</option>
                                    <option value="5400">5400 - Utilities</option>
                                    <option value="5200">5200 - Salaries</option>
                                    <option value="5900">5900 - IT & Software</option>
                                    <option value="6200">6200 - Bank Charges</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Amount (AED)</label>
                                <input type="number" id="debitAmount" placeholder="0.00" value="${amount}" step="0.01">
                            </div>
                        </div>
                    </div>

                    <div>
                        <strong>Credit Entry</strong>
                        <div class="form-row" style="margin-top: 8px;">
                            <div class="form-group">
                                <label>Account Code</label>
                                <select id="creditAccount">
                                    <option value="">Select account...</option>
                                    <option value="1000" selected>1000 - Cash</option>
                                    <option value="1100">1100 - Bank Account</option>
                                    <option value="2000">2000 - Accounts Payable</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Amount (AED)</label>
                                <input type="number" id="creditAmount" placeholder="0.00" value="${amount}" step="0.01">
                            </div>
                        </div>
                    </div>

                    <div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; margin-top: 16px; font-size: 13px;">
                        <strong>Note:</strong> Debit and credit amounts must be equal (balanced entry)
                    </div>

                    <div style="display: flex; gap: 12px; margin-top: 20px;">
                        <button class="btn btn-primary" onclick="submitJournalEntry()">
                            ✓ Post Entry
                        </button>
                        <button class="btn btn-secondary" onclick="addMessage('Cancelled.')">
                            Cancel
                        </button>
                    </div>
                </div>
            `;

            addMessage(form);

            // Auto-sync amounts (optional - user can still edit both)
            setTimeout(() => {
                const debitInput = document.getElementById('debitAmount');
                const creditInput = document.getElementById('creditAmount');

                debitInput.addEventListener('input', (e) => {
                    // Auto-copy to credit if credit is empty or same as previous debit
                    if (!creditInput.value || creditInput.value === debitInput.dataset.lastValue) {
                        creditInput.value = e.target.value;
                    }
                    debitInput.dataset.lastValue = e.target.value;
                });
            }, 100);
        }

        function extractDescription(message) {
            // Simple extraction - can be enhanced
            const patterns = [
                /for (.+)/i,
                /payment (.+)/i,
                /to (.+)/i
            ];

            for (let pattern of patterns) {
                const match = message.match(pattern);
                if (match) return match[1].replace(/\d+/g, '').replace(/(AED|USD)/gi, '').trim();
            }

            return '';
        }

        async function submitJournalEntry() {
            const debitAmt = parseFloat(document.getElementById('debitAmount').value);
            const creditAmt = parseFloat(document.getElementById('creditAmount').value);
            const description = document.getElementById('entryDescription').value;
            const debitAccount = document.getElementById('debitAccount').value;
            const creditAccount = document.getElementById('creditAccount').value;

            if (!debitAmt || !creditAmt || !description || !debitAccount || !creditAccount) {
                addMessage('❌ Please fill in all required fields (accounts, description, and amounts).');
                return;
            }

            if (Math.abs(debitAmt - creditAmt) > 0.01) {
                addMessage('❌ Debit and credit amounts must be equal (balanced entry).');
                return;
            }

            const data = {
                tenantId: TENANT_ID,
                entryDate: document.getElementById('entryDate').value,
                entryType: 'Standard',
                description: description,
                lines: [
                    {
                        accountCode: debitAccount,
                        debitAmount: debitAmt,
                        creditAmount: 0,
                        description: description
                    },
                    {
                        accountCode: creditAccount,
                        debitAmount: 0,
                        creditAmount: creditAmt,
                        description: description
                    }
                ]
            };

            try {
                const response = await fetch('http://localhost:3001/journal-entries', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    const result = await response.json();
                    addMessage(`
                        <div class="result-card">
                            <h4>✅ Journal Entry Posted Successfully</h4>
                            <div class="result-row">
                                <span class="label">Entry ID:</span>
                                <span class="value">${result.entryId}</span>
                            </div>
                            <div class="result-row">
                                <span class="label">Date:</span>
                                <span class="value">${data.entryDate}</span>
                            </div>
                            <div class="result-row">
                                <span class="label">Amount:</span>
                                <span class="value">${debitAmt.toFixed(2)} AED</span>
                            </div>
                            <div class="result-row">
                                <span class="label">Status:</span>
                                <span class="value"><span class="chip success">${result.status}</span></span>
                            </div>
                        </div>
                        <p style="margin-top: 12px;">✓ The transaction has been recorded in the general ledger.</p>
                    `);
                    loadQuickStats();
                } else {
                    const errorText = await response.text();
                    addMessage(`❌ Failed to post journal entry: ${errorText}`);
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><small>Make sure the Ledger Writer service is running on port 3001.</small>`);
            }
        }

        async function showTrialBalance() {
            try {
                const response = await fetch(`http://localhost:3008/reports/trial-balance?tenant_id=${TENANT_ID}&period_end_date=2025-01-31`);
                if (response.ok) {
                    const data = await response.json();

                    let html = `
                        <div class="result-card">
                            <h4>⚖️ Trial Balance</h4>
                            <table class="chat-table">
                                <thead>
                                    <tr>
                                        <th>Account Code</th>
                                        <th>Account Name</th>
                                        <th style="text-align: right;">Debit</th>
                                        <th style="text-align: right;">Credit</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;

                    data.accounts.slice(0, 10).forEach(acc => {
                        const debit = parseFloat(acc.debit_balance || acc.total_debit || 0);
                        const credit = parseFloat(acc.credit_balance || acc.total_credit || 0);
                        html += `
                            <tr>
                                <td>${acc.account_code}</td>
                                <td>${acc.account_name}</td>
                                <td style="text-align: right;">${debit > 0 ? debit.toFixed(2) : '-'}</td>
                                <td style="text-align: right;">${credit > 0 ? credit.toFixed(2) : '-'}</td>
                            </tr>
                        `;
                    });

                    html += `
                                </tbody>
                            </table>
                            <div style="margin-top: 16px; padding-top: 16px; border-top: 2px solid var(--border);">
                                <div class="result-row">
                                    <span class="label"><strong>Total Debits:</strong></span>
                                    <span class="value">${data.total_debits.toFixed(2)} AED</span>
                                </div>
                                <div class="result-row">
                                    <span class="label"><strong>Total Credits:</strong></span>
                                    <span class="value">${data.total_credits.toFixed(2)} AED</span>
                                </div>
                                <div class="result-row">
                                    <span class="label"><strong>Difference:</strong></span>
                                    <span class="value">
                                        <span class="chip ${data.is_balanced ? 'success' : 'warning'}">
                                            ${data.is_balanced ? 'Balanced ✓' : 'Out of Balance'}
                                        </span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    `;

                    addMessage(html);
                } else {
                    addMessage('❌ Failed to load trial balance. Please check if the Reporting Service is running.');
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><small>Make sure the Reporting Service is running on port 3008.</small>`);
            }
        }

        async function showGeneralLedger() {
            addMessage(`
                <p>📖 <strong>General Ledger</strong></p>
                <p>I can show you specific account details. Try asking:</p>
                <ul style="margin: 8px 0 0 20px; line-height: 1.8;">
                    <li>"Show cash account transactions"</li>
                    <li>"What's the balance for account 1000?"</li>
                    <li>"Show all expense accounts"</li>
                </ul>
                <p style="margin-top: 12px;">Or use the <strong>Trial Balance</strong> to see all accounts at once.</p>
            `);
        }

        async function classifyTransaction(message) {
            const amountMatch = message.match(/(\d+(?:,\d{3})*(?:\.\d{2})?)\s*(AED|USD)?/);
            const amount = amountMatch ? parseFloat(amountMatch[1].replace(/,/g, '')) : null;

            if (!amount) {
                addMessage('Please specify an amount to classify (e.g., "Classify: Google Workspace 2400 AED")');
                return;
            }

            addMessage(`🤖 Analyzing transaction with AI...`);

            try {
                const response = await fetch('http://localhost:8001/classify', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        tenant_id: TENANT_ID,
                        invoice_id: 'chat-' + Date.now(),
                        transaction_type: 'AP',
                        lines: [{
                            line_number: 1,
                            description: message,
                            amount: amount,
                            quantity: 1
                        }]
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    const suggestion = result.suggestions[0];

                    addMessage(`
                        <div class="result-card">
                            <h4>🤖 AI Classification Result</h4>
                            <div class="result-row">
                                <span class="label">Account Code:</span>
                                <span class="value">${suggestion.account_code}</span>
                            </div>
                            <div class="result-row">
                                <span class="label">Account Name:</span>
                                <span class="value">${suggestion.account_name}</span>
                            </div>
                            <div class="result-row">
                                <span class="label">Confidence:</span>
                                <span class="value">
                                    <span class="chip ${suggestion.confidence_score > 0.8 ? 'success' : 'warning'}">
                                        ${(suggestion.confidence_score * 100).toFixed(0)}%
                                    </span>
                                </span>
                            </div>
                            <div class="result-row">
                                <span class="label">Reasoning:</span>
                                <span class="value" style="max-width: 400px;">${suggestion.reasoning}</span>
                            </div>
                        </div>
                    `);
                } else {
                    addMessage('❌ Failed to classify transaction.');
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}`);
            }
        }

        async function showCashBalance() {
            try {
                // Query with specific period date that has data
                const response = await fetch(`http://localhost:3008/reports/trial-balance?tenant_id=${TENANT_ID}&period_end_date=2025-01-31`);
                if (response.ok) {
                    const data = await response.json();
                    const cashAccount = data.accounts.find(a => a.account_code === '1000');

                    if (cashAccount) {
                        const debit = parseFloat(cashAccount.debit_balance || cashAccount.total_debit || 0);
                        const credit = parseFloat(cashAccount.credit_balance || cashAccount.total_credit || 0);
                        const balance = debit - credit;
                        addMessage(`
                            <div class="result-card">
                                <h4>💰 Cash Balance</h4>
                                <div style="text-align: center; padding: 20px 0;">
                                    <div style="font-size: 36px; font-weight: 700; color: var(--success);">
                                        ${balance.toFixed(2)} AED
                                    </div>
                                    <div style="margin-top: 8px; color: var(--text-secondary);">
                                        Account 1000 - Cash
                                    </div>
                                    <div style="margin-top: 8px; font-size: 12px; color: var(--text-secondary);">
                                        As of 2025-01-31
                                    </div>
                                </div>
                            </div>
                        `);
                    } else {
                        addMessage('💰 Cash account (1000) not found in trial balance.');
                    }
                } else {
                    addMessage('❌ Failed to fetch cash balance.');
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><small>Make sure the Reporting Service is running on port 3008.</small>`);
            }
        }

        async function showVendorBalances() {
            try {
                addMessage('📊 Fetching vendor balances...');

                const query = `
                    SELECT v.vendor_name, v.payment_terms,
                           COALESCE(SUM(i.amount_outstanding), 0) as balance,
                           COUNT(i.invoice_id) as invoice_count
                    FROM vendors v
                    LEFT JOIN ap_invoices i ON v.vendor_id = i.vendor_id AND i.tenant_id=v.tenant_id
                    WHERE v.tenant_id='${TENANT_ID}' AND v.status='active'
                    GROUP BY v.vendor_id, v.vendor_name, v.payment_terms
                    ORDER BY balance DESC
                `;

                const response = await fetch('http://localhost:3008/api/query', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, params: [] })
                });

                if (response.ok) {
                    const vendors = await response.json();

                    if (!vendors || vendors.length === 0) {
                        addMessage('📋 No vendors found in the system.');
                        return;
                    }

                    const totalBalance = vendors.reduce((sum, v) => sum + parseFloat(v.balance || 0), 0);

                    let html = `
                        <div class="result-card">
                            <h4>🏢 Vendor Balances (Accounts Payable)</h4>
                            <table class="chat-table">
                                <thead>
                                    <tr>
                                        <th>Vendor Name</th>
                                        <th>Payment Terms</th>
                                        <th>Invoices</th>
                                        <th style="text-align: right;">Balance</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;

                    vendors.forEach(vendor => {
                        const balance = parseFloat(vendor.balance || 0);
                        html += `
                            <tr>
                                <td>${vendor.vendor_name}</td>
                                <td>${vendor.payment_terms} days</td>
                                <td>${vendor.invoice_count || 0}</td>
                                <td style="text-align: right; ${balance > 0 ? 'color: var(--danger);' : ''}">${balance.toFixed(2)} AED</td>
                            </tr>
                        `;
                    });

                    html += `
                                </tbody>
                            </table>
                            <div style="margin-top: 16px; padding-top: 16px; border-top: 2px solid var(--border);">
                                <div class="result-row">
                                    <span class="label"><strong>Total Payable:</strong></span>
                                    <span class="value" style="color: var(--danger); font-size: 18px;">${totalBalance.toFixed(2)} AED</span>
                                </div>
                            </div>
                        </div>
                    `;

                    addMessage(html);
                } else {
                    addMessage('❌ Failed to fetch vendor balances.');
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><small>Make sure the Reporting Service is running.</small>`);
            }
        }

        async function showCustomerBalances() {
            try {
                addMessage('📊 Fetching customer balances...');

                const query = `
                    SELECT c.customer_name, c.payment_terms,
                           COALESCE(SUM(i.amount_outstanding), 0) as balance,
                           COUNT(i.invoice_id) as invoice_count
                    FROM customers c
                    LEFT JOIN ar_invoices i ON c.customer_id = i.customer_id AND i.tenant_id=c.tenant_id
                    WHERE c.tenant_id='${TENANT_ID}' AND c.status='active'
                    GROUP BY c.customer_id, c.customer_name, c.payment_terms
                    ORDER BY balance DESC
                `;

                const response = await fetch('http://localhost:3008/api/query', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, params: [] })
                });

                if (response.ok) {
                    const customers = await response.json();

                    if (!customers || customers.length === 0) {
                        addMessage('📋 No customers found in the system.');
                        return;
                    }

                    const totalBalance = customers.reduce((sum, c) => sum + parseFloat(c.balance || 0), 0);

                    let html = `
                        <div class="result-card">
                            <h4>👥 Customer Balances (Accounts Receivable)</h4>
                            <table class="chat-table">
                                <thead>
                                    <tr>
                                        <th>Customer Name</th>
                                        <th>Payment Terms</th>
                                        <th>Invoices</th>
                                        <th style="text-align: right;">Balance</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;

                    customers.forEach(customer => {
                        const balance = parseFloat(customer.balance || 0);
                        html += `
                            <tr>
                                <td>${customer.customer_name}</td>
                                <td>${customer.payment_terms} days</td>
                                <td>${customer.invoice_count || 0}</td>
                                <td style="text-align: right; ${balance > 0 ? 'color: var(--success);' : ''}">${balance.toFixed(2)} AED</td>
                            </tr>
                        `;
                    });

                    html += `
                                </tbody>
                            </table>
                            <div style="margin-top: 16px; padding-top: 16px; border-top: 2px solid var(--border);">
                                <div class="result-row">
                                    <span class="label"><strong>Total Receivable:</strong></span>
                                    <span class="value" style="color: var(--success); font-size: 18px;">${totalBalance.toFixed(2)} AED</span>
                                </div>
                            </div>
                        </div>
                    `;

                    addMessage(html);
                } else {
                    addMessage('❌ Failed to fetch customer balances.');
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><small>Make sure the Reporting Service is running.</small>`);
            }
        }

        async function showRecentTransactions() {
            try {
                const response = await fetch(`http://localhost:3001/journal-entries?tenant_id=${TENANT_ID}&limit=10`);
                if (response.ok) {
                    const data = await response.json();

                    if (!data || data.length === 0) {
                        addMessage('📋 No transactions found. Try posting a journal entry first!');
                        return;
                    }

                    let html = `
                        <div class="result-card">
                            <h4>📋 Recent Transactions</h4>
                            <table class="chat-table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Entry #</th>
                                        <th>Description</th>
                                        <th style="text-align: right;">Amount</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;

                    data.slice(0, 5).forEach(entry => {
                        html += `
                            <tr>
                                <td>${entry.entry_date}</td>
                                <td>${entry.entry_number}</td>
                                <td>${entry.description}</td>
                                <td style="text-align: right;">${entry.total_debit.toFixed(2)}</td>
                                <td><span class="chip success">${entry.status}</span></td>
                            </tr>
                        `;
                    });

                    html += `
                                </tbody>
                            </table>
                        </div>
                    `;

                    addMessage(html);
                } else {
                    addMessage('❌ Failed to load transactions.');
                }
            } catch (err) {
                addMessage(`❌ Error: ${err.message}<br><small>Make sure the Ledger Writer service is running on port 3001.</small>`);
            }
        }

        function showReconciliationInfo() {
            addMessage(`
                <p>🔄 <strong>Bank Reconciliation</strong></p>
                <p>To reconcile your bank statement, you'll need to:</p>
                <ol style="margin: 8px 0 0 20px; line-height: 1.8;">
                    <li>Export your bank statement as CSV</li>
                    <li>Upload it to the reconciliation service</li>
                    <li>AI will match transactions automatically</li>
                </ol>
                <p style="margin-top: 12px;">For now, you can test reconciliation using the demo interface.</p>
            `);
        }

        function showCashFlowInfo() {
            addMessage(`
                <p>📊 <strong>Cash Flow Forecast</strong></p>
                <p>The AI cash flow forecasting service analyzes:</p>
                <ul style="margin: 8px 0 0 20px; line-height: 1.8;">
                    <li>Historical transaction patterns</li>
                    <li>Seasonal trends</li>
                    <li>Upcoming payables and receivables</li>
                </ul>
                <p style="margin-top: 12px;">Access the full forecast through the quick actions menu.</p>
            `);
        }

        async function loadQuickStats() {
            try {
                // Get trial balance for cash balance
                console.log('Loading quick stats...');
                const response = await fetch(`http://localhost:3008/reports/trial-balance?tenant_id=${TENANT_ID}&period_end_date=2025-01-31`);
                console.log('Trial balance response status:', response.status, response.ok);

                if (response.ok) {
                    const data = await response.json();
                    console.log('Trial balance data:', data);
                    console.log('Number of accounts:', data.accounts ? data.accounts.length : 0);

                    const cashAccount = data.accounts.find(a => a.account_code === '1000');
                    console.log('Cash account (1000):', cashAccount);

                    if (cashAccount) {
                        const debit = parseFloat(cashAccount.debit_balance || cashAccount.total_debit || 0);
                        const credit = parseFloat(cashAccount.credit_balance || cashAccount.total_credit || 0);
                        const balance = debit - credit;
                        console.log('Cash balance calculated:', balance, 'AED (debit:', debit, ', credit:', credit, ')');
                        document.getElementById('cashBalance').textContent = balance.toFixed(0) + ' AED';
                    } else {
                        console.log('Cash account not found, setting to 0 AED');
                        document.getElementById('cashBalance').textContent = '0 AED';
                    }
                } else {
                    console.error('Trial balance request failed:', response.status, response.statusText);
                    const errorText = await response.text();
                    console.error('Error response:', errorText);
                }

                // Count transactions this month
                console.log('Loading transaction count...');
                const entriesResponse = await fetch(`http://localhost:3001/journal-entries?tenant_id=${TENANT_ID}`);
                console.log('Journal entries response status:', entriesResponse.status, entriesResponse.ok);

                if (entriesResponse.ok) {
                    const entries = await entriesResponse.json();
                    console.log('Journal entries count:', entries ? entries.length : 0);
                    if (entries && entries.length > 0) {
                        const thisMonth = new Date().toISOString().slice(0, 7);
                        const monthCount = entries.filter(e => e.entry_date && e.entry_date.startsWith(thisMonth)).length;
                        console.log('This month transactions:', monthCount);
                        document.getElementById('monthTransactions').textContent = monthCount;
                    } else {
                        console.log('No entries found, setting to 0');
                        document.getElementById('monthTransactions').textContent = '0';
                    }
                } else {
                    console.log('Journal entries request failed, setting to 0');
                    document.getElementById('monthTransactions').textContent = '0';
                }

                // Mock AP/AR for now
                document.getElementById('apOpen').textContent = '12.5k';
                document.getElementById('arOpen').textContent = '28.3k';
                console.log('Quick stats loaded successfully');
            } catch (err) {
                console.error('Failed to load stats - EXCEPTION:', err);
                console.error('Error stack:', err.stack);
                document.getElementById('cashBalance').textContent = '---';
                document.getElementById('monthTransactions').textContent = '---';
            }
        }

        // Auto-resize textarea
        chatInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        // Focus input on load
        chatInput.focus();
    </script>
</body>
</html>
