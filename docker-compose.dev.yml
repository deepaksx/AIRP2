# AIRP v2.0 - Development Mode
# Only includes infrastructure + working services (ledger-writer + ai-auto-accounting)

networks:
  airp-network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:
  redis_data:
  qdrant_data:

services:
  # ============================================
  # DATABASE - PostgreSQL 15
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: airp-postgres
    environment:
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      TZ: Asia/Dubai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Schema will be loaded manually after first start
      # - ./schemas/sql/ddl.sql:/docker-entrypoint-initdb.d/01-ddl.sql
    ports:
      - "5432:5432"
    networks:
      - airp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airp_admin -d airp_master"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"

  # ============================================
  # EVENT BUS - Redpanda (Kafka-compatible)
  # ============================================
  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.3
    container_name: airp-kafka
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr kafka:33145
      - --advertise-rpc-addr kafka:33145
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --check=false
    ports:
      - "19092:19092"
      - "18081:18081"
      - "18082:18082"
    volumes:
      - kafka_data:/var/lib/redpanda/data
    networks:
      - airp-network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep 'Healthy:.*true' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  # Kafka console UI
  kafka-console:
    image: docker.redpanda.com/redpandadata/console:v2.4.3
    container_name: airp-kafka-console
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_SCHEMAREGISTRY_ENABLED: true
      KAFKA_SCHEMAREGISTRY_URLS: http://kafka:8081
    ports:
      - "8080:8080"
    networks:
      - airp-network
    depends_on:
      - kafka

  # ============================================
  # CACHE - Redis
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: airp-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - airp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # VECTOR DATABASE - Qdrant
  # ============================================
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: airp-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - airp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # CORE SERVICE - Ledger Writer (NestJS)
  # ============================================
  ledger-writer:
    build:
      context: ./services/ledger-writer
      dockerfile: Dockerfile
    container_name: airp-ledger-writer
    environment:
      NODE_ENV: development
      PORT: 3001
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
    ports:
      - "3001:3001"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # PROJECTION SERVICE - Event Consumer
  # ============================================
  projection-service:
    build:
      context: ./services/projection-service
      dockerfile: Dockerfile
    container_name: airp-projection-service
    environment:
      NODE_ENV: development
      PORT: 3002
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
      KAFKA_BROKERS: kafka:9092
    ports:
      - "3002:3002"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # AP SERVICE - Accounts Payable
  # ============================================
  ap-service:
    build:
      context: ./services/ap-service
      dockerfile: Dockerfile
    container_name: airp-ap-service
    environment:
      NODE_ENV: development
      PORT: 3003
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
      KAFKA_BROKERS: kafka:9092
      AI_AUTO_ACCOUNTING_URL: http://ai-auto-accounting:8001
    ports:
      - "3003:3003"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # AR SERVICE - Accounts Receivable
  # ============================================
  ar-service:
    build:
      context: ./services/ar-service
      dockerfile: Dockerfile
    container_name: airp-ar-service
    environment:
      NODE_ENV: development
      PORT: 3004
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
      KAFKA_BROKERS: kafka:9092
    ports:
      - "3004:3004"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # TREASURY SERVICE
  # ============================================
  treasury-service:
    build:
      context: ./services/treasury-service
      dockerfile: Dockerfile
    container_name: airp-treasury-service
    environment:
      NODE_ENV: development
      PORT: 3005
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
    ports:
      - "3005:3005"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # FP&A SERVICE
  # ============================================
  fpna-service:
    build:
      context: ./services/fpna-service
      dockerfile: Dockerfile
    container_name: airp-fpna-service
    environment:
      NODE_ENV: development
      PORT: 3006
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
    ports:
      - "3006:3006"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # POLICY ENGINE
  # ============================================
  policy-engine:
    build:
      context: ./services/policy-engine
      dockerfile: Dockerfile
    container_name: airp-policy-engine
    environment:
      NODE_ENV: development
      PORT: 3007
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
    ports:
      - "3007:3007"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # REPORTING SERVICE
  # ============================================
  reporting-service:
    build:
      context: ./services/reporting-service
      dockerfile: Dockerfile
    container_name: airp-reporting-service
    environment:
      NODE_ENV: development
      PORT: 3008
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: airp_admin
      POSTGRES_PASSWORD: airp_secure_2024
      POSTGRES_DB: airp_master
    ports:
      - "3008:3008"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # AI SERVICE - Auto-Accounting (FastAPI/Python)
  # ============================================
  ai-auto-accounting:
    build:
      context: ./services/ai-auto-accounting
      dockerfile: Dockerfile
    container_name: airp-ai-auto-accounting
    environment:
      PORT: 8001
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AI_PROVIDER: anthropic
    ports:
      - "8001:8001"
    networks:
      - airp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ============================================
  # AI SERVICE - Bank Reconciliation
  # ============================================
  ai-recon:
    build:
      context: ./services/ai-recon
      dockerfile: Dockerfile
    container_name: airp-ai-recon
    environment:
      PORT: 8002
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AI_PROVIDER: anthropic
    ports:
      - "8002:8002"
    networks:
      - airp-network
    restart: unless-stopped

  # ============================================
  # AI SERVICE - Cash Flow Forecasting
  # ============================================
  ai-forecast:
    build:
      context: ./services/ai-forecast
      dockerfile: Dockerfile
    container_name: airp-ai-forecast
    environment:
      PORT: 8003
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AI_PROVIDER: anthropic
    ports:
      - "8003:8003"
    networks:
      - airp-network
    restart: unless-stopped

  # ============================================
  # AI SERVICE - Narrative Reporting
  # ============================================
  ai-narrative:
    build:
      context: ./services/ai-narrative
      dockerfile: Dockerfile
    container_name: airp-ai-narrative
    environment:
      PORT: 8004
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AI_PROVIDER: anthropic
    ports:
      - "8004:8004"
    networks:
      - airp-network
    restart: unless-stopped

  # ============================================
  # AI SERVICE - Policy Advisor (RAG)
  # ============================================
  ai-policy-advisor:
    build:
      context: ./services/ai-policy-advisor
      dockerfile: Dockerfile
    container_name: airp-ai-policy-advisor
    environment:
      PORT: 8005
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AI_PROVIDER: anthropic
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
    ports:
      - "8005:8005"
    networks:
      - airp-network
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
